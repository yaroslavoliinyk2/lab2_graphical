var figure = function (v, u, target) {
         u *= Math.PI;
         v *= 2 * Math.PI;
         var a = 0.5;
         var b = 1;
         var x,y,z;
      
         x = a*(b - Math.cos(u))*Math.sin(u)*Math.cos(v);
         y = a*(b - Math.cos(u))*Math.sin(u)*Math.sin(v);
         z = Math.cos(u);
         target.set(x,y,z);
     }
      
var geom = new THREE.ParametricGeometry(figure, 145, 145);
geom.scale(100,100,100);
      
var uniforms = THREE.UniformsUtils.merge([
    THREE.UniformsLib['ambient'],
    THREE.UniformsLib['lights'],
      {
          myC: { value: new THREE.Vector4(0.1, 0.5, 1, 0)  },
          d: { value: 0}
      }
]);
      
var mat = new THREE.ShaderMaterial( {
    uniforms: uniforms,
    vertexShader: document.getElementById( 'col_ver_shader' ).textContent,
    fragmentShader: document.getElementById( 'col_fram_shad' ).textContent,
    lights: true
} );
      
var mesh = new THREE.Mesh(geom, mat); 
      
mesh.receiveShadow = true;
mesh.castShadow = true;
      
var renderer = new THREE.WebGLRenderer({canvas: document.getElementById('myCanvas'), antialias: true});
renderer.setClearColor(0xF00F00);
renderer.setPixelRatio(window.devicePixelRatio);
renderer.setSize(window.innerWidth, window.innerHeight);
      
var camera =  new THREE.PerspectiveCamera(35, window.innerWidth / window.innerHeight, 300, 10000);
var scene =  new THREE.Scene();
      
var light = new THREE.PointLight(0xffee88,1,0);
light.position.set(0,300,100);
scene.add(light);
      
var sphereLight = new THREE.SphereGeometry(10, 10, 10);
var LightMat =  new THREE.MeshLambertMaterial({ color: 0xFF0000});
var meshLight = new THREE.Mesh(sphereLight, LightMat);
meshLight.position.set(0,2,0);
scene.add(meshLight);
      
mesh.position.set(0, 0, 0);
mesh.rotation.set(Math.PI/4, Math.PI/4, 0);
      
camera.position.set(0,0,1000);
scene.add(mesh);
      
render();
requestAnimationFrame(render);
var d =0;
      
function render(){
    d += 0.1;
    light.position.y = 0;
    light.position.x = -500 * Math.sin(Date.now() / 440);
    light.position.z = 500 * Math.cos(Date.now() / 440);
    meshLight.position.y = -50;
    meshLight.position.x = 200 * Math.sin(Date.now() / 440);
    meshLight.position.z = 700 * Math.cos(Date.now() / 440);
    mesh.material.uniforms.delta.value = d;
    mesh.material.uniforms.delta.needsUpdate = true;
      
    renderer.render(scene, camera);
    requestAnimationFrame(render);
}